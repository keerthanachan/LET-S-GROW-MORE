# -*- coding: utf-8 -*-
"""LGM TASK-1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U9_4c2Htb2vOYC3KKtwHMZZyNR76PnAc
"""

#Iris Flowers Classification ML Project

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from warnings import filterwarnings
filterwarnings(action='ignore')

iris=pd.read_csv("/content/IRIS.csv")
print(iris)

print(iris.shape)

print(iris.describe())

#Checking for null values
print(iris.isna().sum())
print(iris.describe())

iris.head()

iris.head(150)

iris.tail(100)

#Checking for outliars
import matplotlib.pyplot as plt
plt.figure(1)
plt.boxplot([iris['sepal_length']])
plt.figure(2)
plt.boxplot([iris['sepal_width']])
plt.show()

iris.hist()
plt.show()

iris.plot(kind ='box',subplots = True, layout =(2,5),sharex = False)

sns.pairplot(iris,hue='species');

plt.figure(figsize=(10,10))
sns.heatmap(iris.corr(), vmin = -1, vmax = 1, annot=True)

X = iris['sepal_length'].values.reshape(-1,1)
print(X)

Y = iris['sepal_width'].values.reshape(-1,1)
print(Y)

plt.xlabel("sepal_Length")
plt.ylabel("sepal_width")
plt.scatter(X,Y,color='r')
plt.show()

#Correlation
corr_mat = iris.corr()
print(corr_mat)

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn import svm
from sklearn import metrics
from sklearn.tree import DecisionTreeClassifier

train, test = train_test_split(iris, test_size = 0.25)
print(train.shape)
print(test.shape)

train_X = train[['sepal_length', 'sepal_width', 'petal_length',
                 'petal_width']]
train_y = train.species

test_X = test[['sepal_length', 'sepal_width', 'petal_length',
                 'petal_width']]
test_y = test.species

train_X.head()

test_y.head()

#Using KNN Neighbors
from sklearn.neighbors import KNeighborsClassifier
model2 = KNeighborsClassifier(n_neighbors=5)
model2.fit(train_X,train_y)
y_pred2 = model2.predict(test_X)

from sklearn.metrics import accuracy_score
print("Accuracy Score:",accuracy_score(test_y,y_pred2))

#Using Support Vector
from sklearn.svm import SVC
model1 = SVC()
model1.fit(train_X,train_y)

pred_y = model1.predict(test_X)

from sklearn.metrics import accuracy_score
print("Acc=",accuracy_score(test_y,pred_y))

